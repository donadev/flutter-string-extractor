{
  "0": "0",
  "1": "1",
  "5": "5",
  "60": "60",
  "100": "100",
  "101": "101",
  "102": "102",
  "103": "103",
  "104": "104",
  "105": "105",
  "106": "106",
  "107": "107",
  "108": "108",
  "109": "109",
  "200": "200",
  "201": "201",
  "202": "202",
  "203": "203",
  "1000": "1000",
  "UserAgent": "UserAgent",
  "aws-amplify-cli/2.0": "aws-amplify-cli/2.0",
  "Version": "Version",
  "1.0": "1.0",
  "auth": "auth",
  "plugins": "plugins",
  "awsCognitoAuthPlugin": "awsCognitoAuthPlugin",
  "aws-amplify-cli/0.1.0": "aws-amplify-cli/0.1.0",
  "0.1.0": "0.1.0",
  "IdentityManager": "IdentityManager",
  "Default": "Default",
  "CredentialsProvider": "CredentialsProvider",
  "CognitoIdentity": "CognitoIdentity",
  "PoolId": "PoolId",
  "eu-central-1:2db87e52-19bd-4e07-b60e-84dccc82027c": "eu-central-1:2db87e52-19bd-4e07-b60e-84dccc82027c",
  "Region": "Region",
  "eu-central-1": "eu-central-1",
  "CognitoUserPool": "CognitoUserPool",
  "eu-central-1_TzMgN2ZBO": "eu-central-1_TzMgN2ZBO",
  "AppClientId": "AppClientId",
  "295s3imbbu0ts4p2i7venfe771": "295s3imbbu0ts4p2i7venfe771",
  "Auth": "Auth",
  "authenticationFlowType": "authenticationFlowType",
  "USER_SRP_AUTH": "USER_SRP_AUTH",
  "eu-central-1:420e315a-5295-4d67-92e0-203f5f849462": "eu-central-1:420e315a-5295-4d67-92e0-203f5f849462",
  "eu-central-1_5bsRzMz5f": "eu-central-1_5bsRzMz5f",
  "3orb7di1k0clmktrc2k5lkkrm2": "3orb7di1k0clmktrc2k5lkkrm2",
  "all": "all",
  "Tutte": "Tutte",
  "new": "new",
  "Nuove domande": "Nuove domande",
  "answered": "answered",
  "Domande sbagliate": "Domande sbagliate",
  "quizSubscriptionId": "quizSubscriptionId",
  "Quiz subscription non trovata": "Quiz subscription non trovata",
  "dart:convert": "dart:convert",
  "code": "code",
  "message": "message",
  "data": "data",
  "Base Url: $baseUrl": "Base Url: $baseUrl",
  "startDate": "startDate",
  "isRepeatable": "isRepeatable",
  "pageSize": "pageSize",
  "https://v1.api.ammesso.net": "https://v1.api.ammesso.net",
  "https://v1.api.ammesso.co": "https://v1.api.ammesso.co",
  "$methodName error: ${response.message}": "$methodName error: ${response.message}",
  "$methodName exception: $exception": "$methodName exception: $exception",
  "/config": "/config",
  "getConfig": "getConfig",
  "/user/me": "/user/me",
  "getUser": "getUser",
  "updateUser": "updateUser",
  "populate": "populate",
  "quiz": "quiz",
  "/subscription/$quizSubscriptionId": "/subscription/$quizSubscriptionId",
  "getQuizSubscription retrieved from cache": "getQuizSubscription retrieved from cache",
  "getQuizSubscription retrieved from network": "getQuizSubscription retrieved from network",
  "getQuizSubscription": "getQuizSubscription",
  "GET": "GET",
  "/subscription/me": "/subscription/me",
  "getQuizSubscriptions": "getQuizSubscriptions",
  "createQuizSubscription": "createQuizSubscription",
  "area,structure.section": "area,structure.section",
  "/quiz": "/quiz",
  "getQuizzes": "getQuizzes",
  "/section": "/section",
  "getSections": "getSections",
  "questions.question": "questions.question",
  "/activity": "/activity",
  "createActivity": "createActivity",
  "questions.question,sections.section": "questions.question,sections.section",
  "/activity/$activityId": "/activity/$activityId",
  "getActivity retrieved from cache": "getActivity retrieved from cache",
  "getActivity retrieved from network": "getActivity retrieved from network",
  "getActivity": "getActivity",
  "updateActivity": "updateActivity",
  "Activity dropped": "Activity dropped",
  "dropActivity": "dropActivity",
  "subscription": "subscription",
  "pageNumber": "pageNumber",
  "order": "order",
  "updatedAt": "updatedAt",
  "sort": "sort",
  "desc": "desc",
  "isClosed": "isClosed",
  "type": "type",
  "simulation": "simulation",
  "getActivities retrieved from cache": "getActivities retrieved from cache",
  "getActivities retrieved from network": "getActivities retrieved from network",
  "getActivities": "getActivities",
  "getSimulationActivities": "getSimulationActivities",
  "/question/availability": "/question/availability",
  "getQuestionsAvailability retrieved from cache": "getQuestionsAvailability retrieved from cache",
  "getQuestionsAvailability retrieved from network": "getQuestionsAvailability retrieved from network",
  "getQuestionsAvailability": "getQuestionsAvailability",
  "/data/stats": "/data/stats",
  "getQuizSubscriptionData retrieved from cache": "getQuizSubscriptionData retrieved from cache",
  "getQuizSubscriptionData retrieved from network": "getQuizSubscriptionData retrieved from network",
  "getQuizSubscriptionData": "getQuizSubscriptionData",
  "/profilation": "/profilation",
  "getProfilationQuestions": "getProfilationQuestions",
  "asc": "asc",
  "public": "public",
  "/simulation": "/simulation",
  "getSimulations retrieved from cache": "getSimulations retrieved from cache",
  "getSimulations retrieved from network": "getSimulations retrieved from network",
  "getSimulations": "getSimulations",
  "/simulation/$simulationId": "/simulation/$simulationId",
  "getSimulation": "getSimulation",
  "/simulation/$simulationId/ranking/me": "/simulation/$simulationId/ranking/me",
  "getSimulationUserRanking": "getSimulationUserRanking",
  "/simulation/$simulationId/ranking": "/simulation/$simulationId/ranking",
  "getSimulationRanking": "getSimulationRanking",
  "Il codice inserito è scaduto, prova a richiederne uno nuovo": "Il codice inserito è scaduto, prova a richiederne uno nuovo",
  "Il codice inserito non coincide, assicurati di inserire il codice corretto": "Il codice inserito non coincide, assicurati di inserire il codice corretto",
  "Incorrect username or password.": "Incorrect username or password.",
  "La password inserita non è corretta, assicurati di inserire la password corretta": "La password inserita non è corretta, assicurati di inserire la password corretta",
  "Qualcosa è andato storto, contatta il supporto": "Qualcosa è andato storto, contatta il supporto",
  "La password inserita non è valida, assicurati di inserire una password valida": "La password inserita non è valida, assicurati di inserire una password valida",
  "Devi reimpostare la tua password per poter proseguire": "Devi reimpostare la tua password per poter proseguire",
  "Questo account è stato eliminato": "Questo account è stato eliminato",
  "User is not confirmed.": "User is not confirmed.",
  "Account non trovato": "Account non trovato",
  "Sei offline, assicurati di avere una connessione ad Internet attiva": "Sei offline, assicurati di avere una connessione ad Internet attiva",
  "Numero massimo di tentativi raggiunti, aspetta qualche minuto prima di riprovare": "Numero massimo di tentativi raggiunti, aspetta qualche minuto prima di riprovare",
  "Access token $_accessToken": "Access token $_accessToken",
  "email": "email",
  "given_name": "given_name",
  "CONFIRM_SIGN_UP_STEP": "CONFIRM_SIGN_UP_STEP",
  "Qualcosa è andato storto durante la registrazione, contatta il supporto": "Qualcosa è andato storto durante la registrazione, contatta il supporto",
  "signUp error: $error": "signUp error: $error",
  "-1": "-1",
  "Something went wrong": "Something went wrong",
  "resendSignUpCode error: $error": "resendSignUpCode error: $error",
  "confirmSignUp error: $error": "confirmSignUp error: $error",
  "signIn error: $error": "signIn error: $error",
  "CONFIRM_RESET_PASSWORD_WITH_CODE": "CONFIRM_RESET_PASSWORD_WITH_CODE",
  "Qualcosa è andato storto durante il reset della password, contatta il supporto": "Qualcosa è andato storto durante il reset della password, contatta il supporto",
  "resetPassword error: $error": "resetPassword error: $error",
  "createNewPassword error: $error": "createNewPassword error: $error",
  "updatePassword error: $error": "updatePassword error: $error",
  "Qualcosa è andato storto durante il logout, contatta il supporto": "Qualcosa è andato storto durante il logout, contatta il supporto",
  "logout error: $error": "logout error: $error",
  "dart:io": "dart:io",
  "Refreshing access token": "Refreshing access token",
  "Access token refreshed": "Access token refreshed",
  "Error refreshing access token": "Error refreshing access token",
  "Error refreshing access token: $exception": "Error refreshing access token: $exception",
  "totalItems": "totalItems",
  "items": "items",
  "choice": "choice",
  "time": "time",
  "question": "question",
  "correct": "correct",
  "skipped": "skipped",
  "wrong": "wrong",
  "points": "points",
  "stats": "stats",
  "section": "section",
  "_id": "_id",
  "user": "user",
  "score": "score",
  "sections": "sections",
  "questions": "questions",
  "createdAt": "createdAt",
  "version": "version",
  "build": "build",
  "link": "link",
  "android": "android",
  "ios": "ios",
  "huawei": "huawei",
  "body": "body",
  "value": "value",
  "area": "area",
  "isActive": "isActive",
  "choices": "choices",
  "isCorrect": "isCorrect",
  "category": "category",
  "format": "format",
  "explanation": "explanation",
  "available": "available",
  "total": "total",
  "duration": "duration",
  "pointsGoal": "pointsGoal",
  "totalQuestions": "totalQuestions",
  "date": "date",
  "name": "name",
  "meta": "meta",
  "avgTime": "avgTime",
  "number": "number",
  "structure": "structure",
  "topics": "topics",
  "position": "position",
  "mine": "mine",
  "summary": "summary",
  "showRanking": "showRanking",
  "endDate": "endDate",
  "startRanking": "startRanking",
  "endRanking": "endRanking",
  "takenOn": "takenOn",
  "durationMillis": "durationMillis",
  "title": "title",
  "subtitle": "subtitle",
  "url": "url",
  "standard": "standard",
  "marketing": "marketing",
  "thirdParty": "thirdParty",
  "thirdPartyMarketing": "thirdPartyMarketing",
  "firstName": "firstName",
  "lastName": "lastName",
  "lastLogin": "lastLogin",
  "privacy": "privacy",
  "profilation": "profilation",
  "badges": "badges",
  "Simulatore": "Simulatore",
  "Esercitazioni online con correzioni commentate": "Esercitazioni online con correzioni commentate",
  "https://www.testbusters.it/simulatore-tb/?utm_source=appammesso&utm_medium=link&utm_campaign=banner_offerta_formativa": "https://www.testbusters.it/simulatore-tb/?utm_source=appammesso&utm_medium=link&utm_campaign=banner_offerta_formativa",
  "Culturismo Generico": "Culturismo Generico",
  "Una selezione di risorse di Cultura Generale": "Una selezione di risorse di Cultura Generale",
  "https://www.testbusters.it/culturismo-generico/?utm_source=appammesso&utm_medium=link&utm_campaign=banner_offerta_formativa": "https://www.testbusters.it/culturismo-generico/?utm_source=appammesso&utm_medium=link&utm_campaign=banner_offerta_formativa",
  "Testnews": "Testnews",
  "Informazioni e guide didattiche sui test": "Informazioni e guide didattiche sui test",
  "https://www.testbusters.it/testnews/?utm_source=appammesso&utm_medium=link&utm_campaign=banner_offerta_formativa": "https://www.testbusters.it/testnews/?utm_source=appammesso&utm_medium=link&utm_campaign=banner_offerta_formativa",
  "Corsi": "Corsi",
  "Preparazione ai test medico-sanitari in aula e online": "Preparazione ai test medico-sanitari in aula e online",
  "https://www.testbusters.it/corsi/?utm_source=appammesso&utm_medium=link&utm_campaign=banner_offerta_formativa": "https://www.testbusters.it/corsi/?utm_source=appammesso&utm_medium=link&utm_campaign=banner_offerta_formativa",
  "Didattica On Demand": "Didattica On Demand",
  "Risorse digitali On Demand per lo studio autonomo": "Risorse digitali On Demand per lo studio autonomo",
  "https://www.testbusters.it/didattica-on-demand/?utm_source=appammesso&utm_medium=link&utm_campaign=banner_offerta_formativa": "https://www.testbusters.it/didattica-on-demand/?utm_source=appammesso&utm_medium=link&utm_campaign=banner_offerta_formativa",
  "Manuali": "Manuali",
  "Preparazione teorica e pratica per i test": "Preparazione teorica e pratica per i test",
  "https://www.testbusters.it/manuali/?utm_source=appammesso&utm_medium=link&utm_campaign=banner_offerta_formativa": "https://www.testbusters.it/manuali/?utm_source=appammesso&utm_medium=link&utm_campaign=banner_offerta_formativa",
  "https://b1f1aa24cf0d4ce99176e5e455c00719@o488445.ingest.sentry.io/6048088": "https://b1f1aa24cf0d4ce99176e5e455c00719@o488445.ingest.sentry.io/6048088",
  "Amplify was already configured. Was the app restarted?": "Amplify was already configured. Was the app restarted?",
  "Moderat": "Moderat",
  "images/ic_back_black.png": "images/ic_back_black.png",
  "Correzione": "Correzione",
  "Qualcosa è andato storto durante il caricamento della correzione": "Qualcosa è andato storto durante il caricamento della correzione",
  "Risultato": "Risultato",
  "fromActivityCompletion": "fromActivityCompletion",
  "fromSimulationActivity": "fromSimulationActivity",
  "fromRepeatableSimulationActivity": "fromRepeatableSimulationActivity",
  "enableActivityCorrection": "enableActivityCorrection",
  "activityId": "activityId",
  "images/ic_close_black.png": "images/ic_close_black.png",
  "Qualcosa è andato storto durante il caricamento delle statistiche": "Qualcosa è andato storto durante il caricamento delle statistiche",
  "Materie": "Materie",
  "images/navbar_logo.png": "images/navbar_logo.png",
  "dart:math": "dart:math",
  "Percent value must be a double between 0.0 and 1.0": "Percent value must be a double between 0.0 and 1.0",
  "images/ic_dialog_alert.png": "images/ic_dialog_alert.png",
  "Riprova": "Riprova",
  "p": "p",
  "$activityTimeHours": "$activityTimeHours",
  " h": " h",
  "$activityTimeMinutes": "$activityTimeMinutes",
  " $activityTimeMinutes": " $activityTimeMinutes",
  " min": " min",
  "$activityTimeSeconds": "$activityTimeSeconds",
  " $activityTimeSeconds": " $activityTimeSeconds",
  " sec": " sec",
  "Statistiche": "Statistiche",
  "$_activityPoints": "$_activityPoints",
  " punti": " punti",
  "Vedi correzione": "Vedi correzione",
  "images/ic_thumbs_up.png": "images/ic_thumbs_up.png",
  "Bene": "Bene",
  "Benino": "Benino",
  "images/ic_thumbs_down.png": "images/ic_thumbs_down.png",
  "Male": "Male",
  "Corrette": "Corrette",
  "Saltate": "Saltate",
  "Errate": "Errate",
  "$numberOfQuestions": "$numberOfQuestions",
  "Resoconto domande": "Resoconto domande",
  "Sblocca nuove domande": "Sblocca nuove domande",
  "Disponibili": "Disponibili",
  "Totali": "Totali",
  "dd MMMM": "dd MMMM",
  "it_IT": "it_IT",
  "Quiz": "Quiz",
  "Simulazione": "Simulazione",
  "$formattedDate alle $formattedTime": "$formattedDate alle $formattedTime",
  "images/ic_next_black.png": "images/ic_next_black.png",
  "Genera un quiz\\ncomposto da": "Genera un quiz\\ncomposto da",
  " $selectedQuestionsNumber ": " $selectedQuestionsNumber ",
  "domande": "domande",
  "Genera quiz": "Genera quiz",
  ";\n          if (item is Section) {\n            correctAnswers = item.stats.correct;\n            totalAnswers = item.stats.total;\n            itemName = item.name;\n          } else if (item is SectionTopic) {\n            correctAnswers = item.stats.correct;\n            totalAnswers = item.stats.total;\n            itemName = item.name;\n          } else if (item is ActivitySection) {\n            correctAnswers = item.stats.correct;\n            totalAnswers =\n                item.stats.correct + item.stats.skipped + item.stats.wrong;\n            itemName = item.section.name;\n          }\n\n          final progressText = _getProgressText(correctAnswers, totalAnswers);\n          final correctQuestionsPercentage = totalAnswers > 0\n              ? (correctAnswers * 100 / totalAnswers).round()\n              : 0;\n          var progressColor = AmmessoColors.ExtraDarkSmoke;\n          if (totalAnswers > 0) {\n            if (correctQuestionsPercentage >= 80) {\n              progressColor = AmmessoColors.Green;\n            } else if (correctQuestionsPercentage >= 60 &&\n                correctQuestionsPercentage < 80) {\n              progressColor = AmmessoColors.Yellow;\n            } else {\n              progressColor = AmmessoColors.Red;\n            }\n          }\n\n          final rowWidgets = <Widget>[\n            CircularPercentIndicator(\n              radius: 32.0,\n              lineWidth: 4.0,\n              percent: correctQuestionsPercentage / 100,\n              circularStrokeCap: CircularStrokeCap.round,\n              backgroundColor: progressColor.withAlpha(38),\n              progressColor: progressColor,\n            ),\n            const SizedBox(width: 16.0),\n            Flexible(\n              child: Column(\n                mainAxisSize: MainAxisSize.min,\n                crossAxisAlignment: CrossAxisAlignment.stretch,\n                children: [\n                  Text(itemName,\n                      style: AmmessoTypography.CardLabel.copyWith(\n                          color: AmmessoColors.Black)),\n                  Text(progressText,\n                      style: AmmessoTypography.FormError.copyWith(\n                          color: AmmessoColors.Silver)),\n                ],\n              ),\n            ),\n          ];\n\n          if (totalAnswers > 0) {\n            rowWidgets.addAll(\n              [\n                const SizedBox(width: 16.0),\n                Text(\n                  ": ";\n          if (item is Section) {\n            correctAnswers = item.stats.correct;\n            totalAnswers = item.stats.total;\n            itemName = item.name;\n          } else if (item is SectionTopic) {\n            correctAnswers = item.stats.correct;\n            totalAnswers = item.stats.total;\n            itemName = item.name;\n          } else if (item is ActivitySection) {\n            correctAnswers = item.stats.correct;\n            totalAnswers =\n                item.stats.correct + item.stats.skipped + item.stats.wrong;\n            itemName = item.section.name;\n          }\n\n          final progressText = _getProgressText(correctAnswers, totalAnswers);\n          final correctQuestionsPercentage = totalAnswers > 0\n              ? (correctAnswers * 100 / totalAnswers).round()\n              : 0;\n          var progressColor = AmmessoColors.ExtraDarkSmoke;\n          if (totalAnswers > 0) {\n            if (correctQuestionsPercentage >= 80) {\n              progressColor = AmmessoColors.Green;\n            } else if (correctQuestionsPercentage >= 60 &&\n                correctQuestionsPercentage < 80) {\n              progressColor = AmmessoColors.Yellow;\n            } else {\n              progressColor = AmmessoColors.Red;\n            }\n          }\n\n          final rowWidgets = <Widget>[\n            CircularPercentIndicator(\n              radius: 32.0,\n              lineWidth: 4.0,\n              percent: correctQuestionsPercentage / 100,\n              circularStrokeCap: CircularStrokeCap.round,\n              backgroundColor: progressColor.withAlpha(38),\n              progressColor: progressColor,\n            ),\n            const SizedBox(width: 16.0),\n            Flexible(\n              child: Column(\n                mainAxisSize: MainAxisSize.min,\n                crossAxisAlignment: CrossAxisAlignment.stretch,\n                children: [\n                  Text(itemName,\n                      style: AmmessoTypography.CardLabel.copyWith(\n                          color: AmmessoColors.Black)),\n                  Text(progressText,\n                      style: AmmessoTypography.FormError.copyWith(\n                          color: AmmessoColors.Silver)),\n                ],\n              ),\n            ),\n          ];\n\n          if (totalAnswers > 0) {\n            rowWidgets.addAll(\n              [\n                const SizedBox(width: 16.0),\n                Text(\n                  ",
  ",\n                  style: AmmessoTypography.CardTitle.copyWith(\n                      color: progressColor),\n                ),\n              ],\n            );\n          }\n          if (item is Section) {\n            rowWidgets.addAll(\n              [\n                const SizedBox(width: 8.0),\n                Image.asset(\n                  ": ",\n                  style: AmmessoTypography.CardTitle.copyWith(\n                      color: progressColor),\n                ),\n              ],\n            );\n          }\n          if (item is Section) {\n            rowWidgets.addAll(\n              [\n                const SizedBox(width: 8.0),\n                Image.asset(\n                  ",
  ",\n                  color: AmmessoColors.ExtraDarkSmoke,\n                  width: 24,\n                  height: 24,\n                ),\n              ],\n            );\n          }\n\n          final cellPadding = item is Section\n              ? const EdgeInsets.only(\n                  left: 16.0, top: 16.0, right: 8.0, bottom: 16.0)\n              : const EdgeInsets.all(16.0);\n\n          final sectionWidget = GestureDetector(\n            onTap: () {\n              if (_selectionCallback != null) {\n                _selectionCallback(item.id);\n              }\n            },\n            child: Container(\n              color: Colors.white,\n              constraints: const BoxConstraints(minHeight: 64.0),\n              padding: cellPadding,\n              child: Row(\n                children: rowWidgets,\n              ),\n            ),\n          );\n\n          Widget mainWidget;\n          if (index == _items.length - 1) {\n            mainWidget = sectionWidget;\n          } else {\n            mainWidget = Column(\n              mainAxisSize: MainAxisSize.min,\n              children: [\n                sectionWidget,\n                const Divider(\n                  height: 1.0,\n                  thickness: 1.0,\n                  color: AmmessoColors.ExtraDarkSnow,\n                ),\n              ],\n            );\n          }\n          return MapEntry(index, mainWidget);\n        })\n        .values\n        .toList(growable: false);\n  }\n\n  String _getProgressText(int correct, int total) {\n    return total > 0\n        ? ": ",\n                  color: AmmessoColors.ExtraDarkSmoke,\n                  width: 24,\n                  height: 24,\n                ),\n              ],\n            );\n          }\n\n          final cellPadding = item is Section\n              ? const EdgeInsets.only(\n                  left: 16.0, top: 16.0, right: 8.0, bottom: 16.0)\n              : const EdgeInsets.all(16.0);\n\n          final sectionWidget = GestureDetector(\n            onTap: () {\n              if (_selectionCallback != null) {\n                _selectionCallback(item.id);\n              }\n            },\n            child: Container(\n              color: Colors.white,\n              constraints: const BoxConstraints(minHeight: 64.0),\n              padding: cellPadding,\n              child: Row(\n                children: rowWidgets,\n              ),\n            ),\n          );\n\n          Widget mainWidget;\n          if (index == _items.length - 1) {\n            mainWidget = sectionWidget;\n          } else {\n            mainWidget = Column(\n              mainAxisSize: MainAxisSize.min,\n              children: [\n                sectionWidget,\n                const Divider(\n                  height: 1.0,\n                  thickness: 1.0,\n                  color: AmmessoColors.ExtraDarkSnow,\n                ),\n              ],\n            );\n          }\n          return MapEntry(index, mainWidget);\n        })\n        .values\n        .toList(growable: false);\n  }\n\n  String _getProgressText(int correct, int total) {\n    return total > 0\n        ? ",
  "\n        : ": "\n        : ",
  "Nessuna simulazione in programma": "Nessuna simulazione in programma",
  "EEEE dd MMMM, HH:mm": "EEEE dd MMMM, HH:mm",
  "images/ic_activities.png": "images/ic_activities.png",
  "Domanda $_questionNumber di $_totalQuestionsNumber": "Domanda $_questionNumber di $_totalQuestionsNumber",
  "Saltata": "Saltata",
  "Corretta": "Corretta",
  "Sbagliata": "Sbagliata",
  "html": "html",
  "katex": "katex",
  "Spiegazione": "Spiegazione",
  "Questa simulazione può essere\\nripetuta più volte": "Questa simulazione può essere\\nripetuta più volte",
  "Inizia simulazione": "Inizia simulazione",
  "Hai svolto questa simulazione il $formattedTakenOnDate alle $formattedTakenOnTime": "Hai svolto questa simulazione il $formattedTakenOnDate alle $formattedTakenOnTime",
  "Guarda graduatoria": "Guarda graduatoria",
  "La graduatoria verrà pubblicata dal $formattedRankingStartDate alle $formattedRankingStartTime a $formattedRankingEndDate alle $formattedRankingEndTime": "La graduatoria verrà pubblicata dal $formattedRankingStartDate alle $formattedRankingStartTime a $formattedRankingEndDate alle $formattedRankingEndTime",
  "La graduatoria era disponibile fino alle $formattedRankingEndTime del $formattedRankingEndDate": "La graduatoria era disponibile fino alle $formattedRankingEndTime del $formattedRankingEndDate",
  "La graduatoria sarà disponibile fino alle $formattedRankingEndTime del $formattedRankingEndDate": "La graduatoria sarà disponibile fino alle $formattedRankingEndTime del $formattedRankingEndDate",
  "La graduatoria verrà pubblicata il $formattedRankingStartDate alle $formattedRankingStartTime": "La graduatoria verrà pubblicata il $formattedRankingStartDate alle $formattedRankingStartTime",
  "Questa simulazione può essere\\nsvolta una volta sola": "Questa simulazione può essere\\nsvolta una volta sola",
  "Questa simulazione potrà essere svolta dalle $formattedStartTime del $formattedStartDate alle $formattedEndTime del $formattedEndDate": "Questa simulazione potrà essere svolta dalle $formattedStartTime del $formattedStartDate alle $formattedEndTime del $formattedEndDate",
  "Questa simulazione può essere svolta fino alle $formattedEndTime del $formattedEndDate": "Questa simulazione può essere svolta fino alle $formattedEndTime del $formattedEndDate",
  "La simulazione è terminata, poteva essere svolta dalle $formattedStartTime del $formattedStartDate alle $formattedEndTime del $formattedEndDate": "La simulazione è terminata, poteva essere svolta dalle $formattedStartTime del $formattedStartDate alle $formattedEndTime del $formattedEndDate",
  "Non hai svolto la simulazione quindi non puoi visualizzare la graduatoria": "Non hai svolto la simulazione quindi non puoi visualizzare la graduatoria",
  "Questa simulazione potrà essere svolta dalle $formattedStartTime del $formattedStartDate": "Questa simulazione potrà essere svolta dalle $formattedStartTime del $formattedStartDate",
  "Questa simulazione può essere svolta dalle $formattedStartTime del $formattedStartDate": "Questa simulazione può essere svolta dalle $formattedStartTime del $formattedStartDate",
  "La simulazione è terminata, poteva essere svolta fino alle $formattedEndTime del $formattedEndDate": "La simulazione è terminata, poteva essere svolta fino alle $formattedEndTime del $formattedEndDate",
  "Istruzioni": "Istruzioni",
  "Leggi prima di iniziare": "Leggi prima di iniziare",
  "Timer": "Timer",
  "Tempo a disposizione": "Tempo a disposizione",
  "Punteggio": "Punteggio",
  "images/ic_stopwatch.png": "images/ic_stopwatch.png",
  "Il timer non può essere fermato, assicurati di avere il tempo necessario a completare la simulazione.": "Il timer non può essere fermato, assicurati di avere il tempo necessario a completare la simulazione.",
  "images/ic_clock.png": "images/ic_clock.png",
  "Cliccando su inizia avrai": "Cliccando su inizia avrai",
  " $simulationDurationMinutes minuti ": " $simulationDurationMinutes minuti ",
  "a disposizione per rispondere a": "a disposizione per rispondere a",
  " $simulationTotalQuestions domande": " $simulationTotalQuestions domande",
  "images/ic_medal.png": "images/ic_medal.png",
  "Le risposte in bianco valgono": "Le risposte in bianco valgono",
  " ${_formatPoints(_simulation.points.skipped)} punti, ": " ${_formatPoints(_simulation.points.skipped)} punti, ",
  "le risposte giuste": "le risposte giuste",
  " ${_formatPoints(_simulation.points.correct)} punti ": " ${_formatPoints(_simulation.points.correct)} punti ",
  "e le risposte sbagliate": "e le risposte sbagliate",
  " ${_formatPoints(_simulation.points.wrong)} punti": " ${_formatPoints(_simulation.points.wrong)} punti",
  ";\n    if (activityTimeHours > 0) {\n      activityTime += ": ";\n    if (activityTimeHours > 0) {\n      activityTime += ",
  ";\n      if (activityTimeHours > 1) {\n        activityTime += ": ";\n      if (activityTimeHours > 1) {\n        activityTime += ",
  "; //TODO: localize\n      } else {\n        activityTime += ": "; //TODO: localize\n      } else {\n        activityTime += ",
  "; //TODO: localize\n      }\n    }\n    if (activityTimeMinutes > 0) {\n      if (activityTime.isNotEmpty) {\n        activityTime += ": "; //TODO: localize\n      }\n    }\n    if (activityTimeMinutes > 0) {\n      if (activityTime.isNotEmpty) {\n        activityTime += ",
  ";\n      }\n      activityTime += ": ";\n      }\n      activityTime += ",
  ";\n      if (activityTimeMinutes > 1) {\n        activityTime += ": ";\n      if (activityTimeMinutes > 1) {\n        activityTime += ",
  "; //TODO: localize\n      }\n    }\n    if (activityTimeSeconds > 0) {\n      if (activityTime.isNotEmpty) {\n        activityTime += ": "; //TODO: localize\n      }\n    }\n    if (activityTimeSeconds > 0) {\n      if (activityTime.isNotEmpty) {\n        activityTime += ",
  "; //TODO: localize\n      }\n      activityTime += ": "; //TODO: localize\n      }\n      activityTime += ",
  ";\n      if (activityTimeSeconds > 1) {\n        activityTime += ": ";\n      if (activityTimeSeconds > 1) {\n        activityTime += ",
  "; //TODO: localize\n      }\n    }\n\n    return GestureDetector(\n      onTap: () {\n        if (_selectionCallback != null) {\n          _selectionCallback();\n        }\n      },\n      child: Container(\n        decoration: BoxDecoration(\n          color: _mine ? AmmessoColors.Blue : Colors.white,\n          borderRadius: BorderRadius.circular(4.0),\n        ),\n        constraints: const BoxConstraints(minHeight: 64.0),\n        padding: const EdgeInsets.only(\n            left: 16.0, top: 16.0, right: 8.0, bottom: 16.0),\n        child: IntrinsicHeight(\n          child: Row(\n            children: [\n              Text(": "; //TODO: localize\n      }\n    }\n\n    return GestureDetector(\n      onTap: () {\n        if (_selectionCallback != null) {\n          _selectionCallback();\n        }\n      },\n      child: Container(\n        decoration: BoxDecoration(\n          color: _mine ? AmmessoColors.Blue : Colors.white,\n          borderRadius: BorderRadius.circular(4.0),\n        ),\n        constraints: const BoxConstraints(minHeight: 64.0),\n        padding: const EdgeInsets.only(\n            left: 16.0, top: 16.0, right: 8.0, bottom: 16.0),\n        child: IntrinsicHeight(\n          child: Row(\n            children: [\n              Text(",
  ",\n                  style: AmmessoTypography.ListTitle.copyWith(\n                      color: _mine ? Colors.white : AmmessoColors.Black)),\n              const SizedBox(width: 16.0),\n              VerticalDivider(\n                width: 1.0,\n                thickness: 1.0,\n                color: _mine\n                    ? AmmessoColors.ExtraDarkSnow\n                    : AmmessoColors.DarkSnow,\n              ),\n              const SizedBox(width: 16.0),\n              Flexible(\n                child: Column(\n                  mainAxisSize: MainAxisSize.min,\n                  crossAxisAlignment: CrossAxisAlignment.stretch,\n                  children: [\n                    Text(": ",\n                  style: AmmessoTypography.ListTitle.copyWith(\n                      color: _mine ? Colors.white : AmmessoColors.Black)),\n              const SizedBox(width: 16.0),\n              VerticalDivider(\n                width: 1.0,\n                thickness: 1.0,\n                color: _mine\n                    ? AmmessoColors.ExtraDarkSnow\n                    : AmmessoColors.DarkSnow,\n              ),\n              const SizedBox(width: 16.0),\n              Flexible(\n                child: Column(\n                  mainAxisSize: MainAxisSize.min,\n                  crossAxisAlignment: CrossAxisAlignment.stretch,\n                  children: [\n                    Text(",
  ", //TODO: localize\n                        style: AmmessoTypography.ListTitle.copyWith(\n                            color: _mine ? Colors.white : AmmessoColors.Black)),\n                    Text(activityTime,\n                        style: AmmessoTypography.FormError.copyWith(\n                            color: _mine\n                                ? AmmessoColors.ExtraDarkSnow\n                                : AmmessoColors.Silver)),\n                  ],\n                ),\n              ),\n              const SizedBox(width: 8.0),\n              Image.asset(\n                ": ", //TODO: localize\n                        style: AmmessoTypography.ListTitle.copyWith(\n                            color: _mine ? Colors.white : AmmessoColors.Black)),\n                    Text(activityTime,\n                        style: AmmessoTypography.FormError.copyWith(\n                            color: _mine\n                                ? AmmessoColors.ExtraDarkSnow\n                                : AmmessoColors.Silver)),\n                  ],\n                ),\n              ),\n              const SizedBox(width: 8.0),\n              Image.asset(\n                ",
  "Ti sei posizionato": "Ti sei posizionato",
  "$_userPosition° su $_totalParticipants": "$_userPosition° su $_totalParticipants",
  "Guarda graduatoria completa": "Guarda graduatoria completa",
  "images/testbusters_logo_lg_white.png": "images/testbusters_logo_lg_white.png",
  "images/ic_trash.png": "images/ic_trash.png",
  "Elimina": "Elimina",
  "Continua": "Continua",
  "Risposte date": "Risposte date",
  "Domande totali": "Domande totali",
  "Indietro": "Indietro",
  "$_currentPage di $_totalPages": "$_currentPage di $_totalPages",
  "Avanti": "Avanti",
  "Requesting new activities page: $pageNumber": "Requesting new activities page: $pageNumber",
  "Already fetched items: $alreadyFetchedItems": "Already fetched items: $alreadyFetchedItems",
  "Currently fetched items: ${activitiesPage.items.length}": "Currently fetched items: ${activitiesPage.items.length}",
  "Total items: ${activitiesPage.totalItems}": "Total items: ${activitiesPage.totalItems}",
  "Qualcosa è andato storto durante il caricamento delle tue attività": "Qualcosa è andato storto durante il caricamento delle tue attività",
  "Non hai ancora concluso nessuna attività": "Non hai ancora concluso nessuna attività",
  "Home": "Home",
  "Attività": "Attività",
  "Simulazioni": "Simulazioni",
  "Profilo": "Profilo",
  "images/ic_home.png": "images/ic_home.png",
  "images/ic_quiz.png": "images/ic_quiz.png",
  "images/ic_simulations.png": "images/ic_simulations.png",
  "images/ic_profile.png": "images/ic_profile.png",
  "Unable to find dashboard screen": "Unable to find dashboard screen",
  "Qualcosa è andato storto durante il caricamento della home": "Qualcosa è andato storto durante il caricamento della home",
  "Con il codice promozionale": "Con il codice promozionale",
  "hai il 5% di sconto sui corsi Testbusters": "hai il 5% di sconto sui corsi Testbusters",
  "AMMESSOIT": "AMMESSOIT",
  "Scopri l\\": "Scopri l\\",
  ", //TODO: localize\n        buttonCallback: () => TestbustersServicesScreen.show(context));\n    listItems.add(testbustersHeaderListItem);\n    listItems.add(spacerListItem);\n\n    if (quizSubscriptionResult.state == ViewState.complete &&\n        _viewModel.quizSubscription != null) {\n      final quizSubscriptionProgressListItem = QuizSubscriptionProgressListItem(\n          title: ": ", //TODO: localize\n        buttonCallback: () => TestbustersServicesScreen.show(context));\n    listItems.add(testbustersHeaderListItem);\n    listItems.add(spacerListItem);\n\n    if (quizSubscriptionResult.state == ViewState.complete &&\n        _viewModel.quizSubscription != null) {\n      final quizSubscriptionProgressListItem = QuizSubscriptionProgressListItem(\n          title: ",
  ", //TODO: localize\n          correctQuestionsNumber: _viewModel.quizSubscription.stats.correct,\n          skippedQuestionsNumber: _viewModel.quizSubscription.stats.skipped,\n          wrongQuestionsNumber: _viewModel.quizSubscription.stats.wrong);\n      listItems.add(quizSubscriptionProgressListItem);\n    } else if (quizSubscriptionResult.state == ViewState.loading) {\n      loaderItemAdded = true;\n      const loadingListItem = LoadingListItem(padding: EdgeInsets.zero);\n      listItems.add(loadingListItem);\n    }\n\n    if (simulationResult.state == ViewState.complete &&\n        _viewModel.simulations != null) {\n      final subjectsProgressListItem = PlannedSimulationListItem(\n          title: ": ", //TODO: localize\n          correctQuestionsNumber: _viewModel.quizSubscription.stats.correct,\n          skippedQuestionsNumber: _viewModel.quizSubscription.stats.skipped,\n          wrongQuestionsNumber: _viewModel.quizSubscription.stats.wrong);\n      listItems.add(quizSubscriptionProgressListItem);\n    } else if (quizSubscriptionResult.state == ViewState.loading) {\n      loaderItemAdded = true;\n      const loadingListItem = LoadingListItem(padding: EdgeInsets.zero);\n      listItems.add(loadingListItem);\n    }\n\n    if (simulationResult.state == ViewState.complete &&\n        _viewModel.simulations != null) {\n      final subjectsProgressListItem = PlannedSimulationListItem(\n          title: ",
  ", //TODO: localize\n          simulations: _viewModel.simulations,\n          selectionCallback: (simulationId) => _showSimulation(simulationId));\n      listItems.add(spacerListItem);\n      listItems.add(subjectsProgressListItem);\n    } else if (simulationResult.state == ViewState.loading &&\n        !loaderItemAdded) {\n      const loadingListItem = LoadingListItem();\n      listItems.add(loadingListItem);\n    }\n\n    if (quizSubscriptionDataResult.state == ViewState.complete &&\n        _viewModel.quizSubscriptionData != null) {\n      final subjectsProgressListItem = ItemsProgressListItem(\n          title: ": ", //TODO: localize\n          simulations: _viewModel.simulations,\n          selectionCallback: (simulationId) => _showSimulation(simulationId));\n      listItems.add(spacerListItem);\n      listItems.add(subjectsProgressListItem);\n    } else if (simulationResult.state == ViewState.loading &&\n        !loaderItemAdded) {\n      const loadingListItem = LoadingListItem();\n      listItems.add(loadingListItem);\n    }\n\n    if (quizSubscriptionDataResult.state == ViewState.complete &&\n        _viewModel.quizSubscriptionData != null) {\n      final subjectsProgressListItem = ItemsProgressListItem(\n          title: ",
  ";\n            if (loadSectionResult.state == ViewState.complete &&\n                loadSectionResult.data?.name != null) {\n              title = loadSectionResult.data.name;\n            }\n            return Text(title,\n                style: AmmessoTypography.Headline5.copyWith(\n                    color: AmmessoColors.Black));\n          },\n        ),\n      ),\n      body: SafeArea(\n        child: NotificationListener<OverscrollIndicatorNotification>(\n          onNotification: (OverscrollIndicatorNotification overScroll) {\n            overScroll.disallowGlow();\n            return;\n          },\n          child: Consumer(\n            builder: (context, watch, child) {\n              final loadSectionResult =\n                  watch(_viewModel.loadSectionProvider).value;\n              var content;\n              switch (loadSectionResult.state) {\n                case ViewState.loading:\n                  content =\n                      const Center(child: AmmessoCircularProgressIndicator());\n                  break;\n                case ViewState.error:\n                  content = Center(\n                    child: AmmessoErrorView(\n                      description:\n                          ": ";\n            if (loadSectionResult.state == ViewState.complete &&\n                loadSectionResult.data?.name != null) {\n              title = loadSectionResult.data.name;\n            }\n            return Text(title,\n                style: AmmessoTypography.Headline5.copyWith(\n                    color: AmmessoColors.Black));\n          },\n        ),\n      ),\n      body: SafeArea(\n        child: NotificationListener<OverscrollIndicatorNotification>(\n          onNotification: (OverscrollIndicatorNotification overScroll) {\n            overScroll.disallowGlow();\n            return;\n          },\n          child: Consumer(\n            builder: (context, watch, child) {\n              final loadSectionResult =\n                  watch(_viewModel.loadSectionProvider).value;\n              var content;\n              switch (loadSectionResult.state) {\n                case ViewState.loading:\n                  content =\n                      const Center(child: AmmessoCircularProgressIndicator());\n                  break;\n                case ViewState.error:\n                  content = Center(\n                    child: AmmessoErrorView(\n                      description:\n                          ",
  ", //TODO: localize\n                      retryCallback: () => _viewModel.loadData(),\n                    ),\n                  );\n                  break;\n                case ViewState.complete:\n                  content = Container(\n                      color: AmmessoColors.DarkSnow,\n                      child: _getList(loadSectionResult.data));\n                  break;\n              }\n              return content;\n            },\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _getList(Section section) {\n    final quizSubscriptionProgressListItem = QuizSubscriptionProgressListItem(\n        title: ": ", //TODO: localize\n                      retryCallback: () => _viewModel.loadData(),\n                    ),\n                  );\n                  break;\n                case ViewState.complete:\n                  content = Container(\n                      color: AmmessoColors.DarkSnow,\n                      child: _getList(loadSectionResult.data));\n                  break;\n              }\n              return content;\n            },\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _getList(Section section) {\n    final quizSubscriptionProgressListItem = QuizSubscriptionProgressListItem(\n        title: ",
  ",\n        correctQuestionsNumber: section.stats.correct,\n        skippedQuestionsNumber: section.stats.skipped,\n        wrongQuestionsNumber: section.stats.wrong);\n    const spacerListItem = SpacerListItem(height: 16.0);\n    final subjectsProgressListItem =\n        ItemsProgressListItem(title: ": ",\n        correctQuestionsNumber: section.stats.correct,\n        skippedQuestionsNumber: section.stats.skipped,\n        wrongQuestionsNumber: section.stats.wrong);\n    const spacerListItem = SpacerListItem(height: 16.0);\n    final subjectsProgressListItem =\n        ItemsProgressListItem(title: ",
  "SERVIZI": "SERVIZI",
  "RISORSE": "RISORSE",
  "Testbusters": "Testbusters",
  "Could not launch $url": "Could not launch $url",
  "Primario": "Primario",
  "Hai ottenuto il punteggio massimo al primo tentativo, due pollici in su da Bob Kelso!": "Hai ottenuto il punteggio massimo al primo tentativo, due pollici in su da Bob Kelso!",
  "primary": "primary",
  "Ricercatore": "Ricercatore",
  ",\n        ": ",\n        ",
  "));\n    output.add(Badge(\n        ": "));\n    output.add(Badge(\n        ",
  "Badge": "Badge",
  "Qualcosa è andato storto durante il caricamento delle tue informazioni": "Qualcosa è andato storto durante il caricamento delle tue informazioni",
  "Inserisci una password": "Inserisci una password",
  "La password deve contenere almeno 8 caratteri": "La password deve contenere almeno 8 caratteri",
  "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d\\w\\W]{8,}$": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d\\w\\W]{8,}$",
  "La password deve contenere almeno una lettera maiuscola, una minuscola e un numero": "La password deve contenere almeno una lettera maiuscola, una minuscola e un numero",
  "Modifica password": "Modifica password",
  "Salva": "Salva",
  "Vecchia password": "Vecchia password",
  "images/ic_eye_slashed.png": "images/ic_eye_slashed.png",
  "images/ic_eye.png": "images/ic_eye.png",
  "Nuova password": "Nuova password",
  "images/ic_dialog_done.png": "images/ic_dialog_done.png",
  "Modifiche salvate": "Modifiche salvate",
  "Password cambiata con successo": "Password cambiata con successo",
  "Chiudi": "Chiudi",
  "Nome": "Nome",
  "Inserisci un ${_fieldName.toLowerCase()}": "Inserisci un ${_fieldName.toLowerCase()}",
  "$_fieldName cambiato con successo": "$_fieldName cambiato con successo",
  "Cognome": "Cognome",
  "Modifica nome": "Modifica nome",
  "Modifica cognome": "Modifica cognome",
  "Cambia quiz": "Cambia quiz",
  "Contatta il supporto": "Contatta il supporto",
  "Privacy Policy": "Privacy Policy",
  "Logout": "Logout",
  "Versione ${packageInfo.version} (${packageInfo.buildNumber})": "Versione ${packageInfo.version} (${packageInfo.buildNumber})",
  "Conferma logout": "Conferma logout",
  "Sei sicuro di voler effettuare il logout?": "Sei sicuro di voler effettuare il logout?",
  "Annulla": "Annulla",
  "Conferma": "Conferma",
  "${_packageInfo.value?.version} (${_packageInfo.value?.buildNumber})": "${_packageInfo.value?.version} (${_packageInfo.value?.buildNumber})",
  "</br></br></br></br>--------------------------------</br></br><b><i>Scrivi il tuo messaggio al di sopra di questa riga ": "</br></br></br></br>--------------------------------</br></br><b><i>Scrivi il tuo messaggio al di sopra di questa riga ",
  "senza eliminare le informazioni qui di seguito, ": "senza eliminare le informazioni qui di seguito, ",
  "ci serviranno per darti un supporto migliore.</i></b></br></br>": "ci serviranno per darti un supporto migliore.</i></b></br></br>",
  "<i>userId: $userId</i></br>": "<i>userId: $userId</i></br>",
  "<i>subscriptionId: $quizSubscriptionId</i></br>": "<i>subscriptionId: $quizSubscriptionId</i></br>",
  "<i>app version: $appVersion</i></br>": "<i>app version: $appVersion</i></br>",
  "Richiesta supporto app": "Richiesta supporto app",
  "info@ammesso.it": "info@ammesso.it",
  "Qualcosa è andato storto, scrivici a info@ammesso.it per ricevere supporto": "Qualcosa è andato storto, scrivici a info@ammesso.it per ricevere supporto",
  "ultima versione dell": "ultima versione dell",
  "Configura quiz": "Configura quiz",
  "Qualcosa è andato storto durante il caricamento degli argomenti del quiz": "Qualcosa è andato storto durante il caricamento degli argomenti del quiz",
  "Inizia quiz": "Inizia quiz",
  "SCEGLI ARGOMENTI": "SCEGLI ARGOMENTI",
  "number_of_questions": "number_of_questions",
  "QUIZ DA CONCLUDERE": "QUIZ DA CONCLUDERE",
  "simulationId": "simulationId",
  "simulationName": "simulationName",
  "Qualcosa è andato storto durante il caricamento della simulazione": "Qualcosa è andato storto durante il caricamento della simulazione",
  "RISULTATO": "RISULTATO",
  "Requesting new simulation activities page: $pageNumber": "Requesting new simulation activities page: $pageNumber",
  "re artificially adding\n        // the header cell view\n        alreadyFetchedItems -= 1;\n      }\n      final totalFetchedItems =\n          alreadyFetchedItems + simulationActivitiesPage.items.length;\n      final allItemsFetched =\n          totalFetchedItems == simulationActivitiesPage.totalItems;\n      final allPagesLoaded = simulationActivitiesPage.pageNumber *\n              simulationActivitiesPage.pageSize >=\n          simulationActivitiesPage.totalItems;\n      final isLastPage = allItemsFetched || allPagesLoaded;\n\n      debugPrint(": "re artificially adding\n        // the header cell view\n        alreadyFetchedItems -= 1;\n      }\n      final totalFetchedItems =\n          alreadyFetchedItems + simulationActivitiesPage.items.length;\n      final allItemsFetched =\n          totalFetchedItems == simulationActivitiesPage.totalItems;\n      final allPagesLoaded = simulationActivitiesPage.pageNumber *\n              simulationActivitiesPage.pageSize >=\n          simulationActivitiesPage.totalItems;\n      final isLastPage = allItemsFetched || allPagesLoaded;\n\n      debugPrint(",
  ");\n      debugPrint(\n          ": ");\n      debugPrint(\n          ",
  ");\n      debugPrint(": ");\n      debugPrint(",
  ");\n\n      final pageItems = <ListItem>[];\n      if (loadSimulationActivitiesResult.data.pageNumber == 1) {\n        final simulationHeaderListItem = SimulationHeaderListItem(\n            simulation: simulation,\n            buttonCallback: () {\n              if (!simulation.isRepeatable && simulation.takenOn != null) {\n                SimulationRankingScreen.show(context, simulation.id);\n              } else {\n                SteppedPagerScreen.show(context,\n                    pagerData: NewSimulationData(\n                        simulationId: simulation.id,\n                        simulationType: simulation.type,\n                        isRepeatable: simulation.isRepeatable,\n                        simulationDurationMillis: simulation.durationMillis));\n              }\n            });\n\n        final columnChildren = [\n          simulationHeaderListItem.getCellView(context),\n          const SpacerCellView(height: 16.0),\n          SimulationInstructionsCellView(simulation: simulation),\n        ];\n        if (simulationActivitiesPage.items.isNotEmpty) {\n          columnChildren.add(const SizedBox(height: 24.0));\n          columnChildren.add(const HeaderCellView(\n              title: ": ");\n\n      final pageItems = <ListItem>[];\n      if (loadSimulationActivitiesResult.data.pageNumber == 1) {\n        final simulationHeaderListItem = SimulationHeaderListItem(\n            simulation: simulation,\n            buttonCallback: () {\n              if (!simulation.isRepeatable && simulation.takenOn != null) {\n                SimulationRankingScreen.show(context, simulation.id);\n              } else {\n                SteppedPagerScreen.show(context,\n                    pagerData: NewSimulationData(\n                        simulationId: simulation.id,\n                        simulationType: simulation.type,\n                        isRepeatable: simulation.isRepeatable,\n                        simulationDurationMillis: simulation.durationMillis));\n              }\n            });\n\n        final columnChildren = [\n          simulationHeaderListItem.getCellView(context),\n          const SpacerCellView(height: 16.0),\n          SimulationInstructionsCellView(simulation: simulation),\n        ];\n        if (simulationActivitiesPage.items.isNotEmpty) {\n          columnChildren.add(const SizedBox(height: 24.0));\n          columnChildren.add(const HeaderCellView(\n              title: ",
  ")); //TODO: localize\n        }\n        final columnListItem = ColumnListItem(children: columnChildren);\n        pageItems.add(columnListItem);\n      }\n\n      if (simulationActivitiesPage.items.isNotEmpty) {\n        pageItems.addAll(\n            simulationActivitiesPage.items.map<ListItem>((simulationActivity) {\n          if (!simulationActivity.isClosed) {\n            final answeredQuestionsNumber = simulationActivity.questions\n                .where((element) => element.choice != null)\n                .length;\n            return UncompletedActivityListItem(\n                activityType: simulationActivity.type,\n                updateDate: simulationActivity.updatedAt,\n                answeredQuestionsNumber: answeredQuestionsNumber,\n                totalQuestionsNumber: simulationActivity.questions.length,\n                continueQuizCallback: () => SteppedPagerScreen.show(context,\n                    pagerData: UncompletedSimulationData(\n                        activityId: simulationActivity.id,\n                        simulationId: simulation.id,\n                        simulationType: simulation.type,\n                        isRepeatable: simulation.isRepeatable,\n                        simulationDurationMillis: simulation.durationMillis)));\n          } else {\n            return CompletedActivityListItem(\n                activityType: simulationActivity.type,\n                completionDate: simulationActivity.updatedAt,\n                correctQuestionsNumber: simulationActivity.score.correct,\n                skippedQuestionsNumber: simulationActivity.score.skipped,\n                wrongQuestionsNumber: simulationActivity.score.wrong,\n                activityPoints: simulationActivity.score.points,\n                activityTimeMillis: simulationActivity.score.timeMillis,\n                openActivityDetailsCallback: () {\n                  ActivityStatsScreen.show(context,\n                      activityId: simulationActivity.id);\n                });\n          }\n        }).toList(growable: false));\n      }\n\n      if (isLastPage) {\n        _pagingController.appendLastPage(pageItems);\n      } else {\n        final nextPageNumber =\n            loadSimulationActivitiesResult.data.pageNumber + 1;\n        _pagingController.appendPage(pageItems, nextPageNumber);\n      }\n    }\n\n    return Container(\n      color: AmmessoColors.DarkSnow,\n      child: RefreshIndicator(\n        key: _refreshIndicatorState,\n        color: AmmessoColors.Blue,\n        onRefresh: () => _refreshData(),\n        child: PagedListView.separated(\n          physics: const AlwaysScrollableScrollPhysics(),\n          padding: const EdgeInsets.all(16.0),\n          pagingController: _pagingController,\n          separatorBuilder: (BuildContext context, int index) {\n            return const SpacerCellView(height: 16.0);\n          },\n          builderDelegate: PagedChildBuilderDelegate<ListItem>(\n            itemBuilder: (context, listItem, index) {\n              return listItem.getCellView(context);\n            },\n            firstPageProgressIndicatorBuilder: (context) =>\n                const LoadingCellView(padding: EdgeInsets.zero),\n            newPageProgressIndicatorBuilder: (context) =>\n                const LoadingCellView(padding: EdgeInsets.zero),\n            firstPageErrorIndicatorBuilder: (context) => Center(\n              child: AmmessoErrorView(\n                description:\n                    ": ")); //TODO: localize\n        }\n        final columnListItem = ColumnListItem(children: columnChildren);\n        pageItems.add(columnListItem);\n      }\n\n      if (simulationActivitiesPage.items.isNotEmpty) {\n        pageItems.addAll(\n            simulationActivitiesPage.items.map<ListItem>((simulationActivity) {\n          if (!simulationActivity.isClosed) {\n            final answeredQuestionsNumber = simulationActivity.questions\n                .where((element) => element.choice != null)\n                .length;\n            return UncompletedActivityListItem(\n                activityType: simulationActivity.type,\n                updateDate: simulationActivity.updatedAt,\n                answeredQuestionsNumber: answeredQuestionsNumber,\n                totalQuestionsNumber: simulationActivity.questions.length,\n                continueQuizCallback: () => SteppedPagerScreen.show(context,\n                    pagerData: UncompletedSimulationData(\n                        activityId: simulationActivity.id,\n                        simulationId: simulation.id,\n                        simulationType: simulation.type,\n                        isRepeatable: simulation.isRepeatable,\n                        simulationDurationMillis: simulation.durationMillis)));\n          } else {\n            return CompletedActivityListItem(\n                activityType: simulationActivity.type,\n                completionDate: simulationActivity.updatedAt,\n                correctQuestionsNumber: simulationActivity.score.correct,\n                skippedQuestionsNumber: simulationActivity.score.skipped,\n                wrongQuestionsNumber: simulationActivity.score.wrong,\n                activityPoints: simulationActivity.score.points,\n                activityTimeMillis: simulationActivity.score.timeMillis,\n                openActivityDetailsCallback: () {\n                  ActivityStatsScreen.show(context,\n                      activityId: simulationActivity.id);\n                });\n          }\n        }).toList(growable: false));\n      }\n\n      if (isLastPage) {\n        _pagingController.appendLastPage(pageItems);\n      } else {\n        final nextPageNumber =\n            loadSimulationActivitiesResult.data.pageNumber + 1;\n        _pagingController.appendPage(pageItems, nextPageNumber);\n      }\n    }\n\n    return Container(\n      color: AmmessoColors.DarkSnow,\n      child: RefreshIndicator(\n        key: _refreshIndicatorState,\n        color: AmmessoColors.Blue,\n        onRefresh: () => _refreshData(),\n        child: PagedListView.separated(\n          physics: const AlwaysScrollableScrollPhysics(),\n          padding: const EdgeInsets.all(16.0),\n          pagingController: _pagingController,\n          separatorBuilder: (BuildContext context, int index) {\n            return const SpacerCellView(height: 16.0);\n          },\n          builderDelegate: PagedChildBuilderDelegate<ListItem>(\n            itemBuilder: (context, listItem, index) {\n              return listItem.getCellView(context);\n            },\n            firstPageProgressIndicatorBuilder: (context) =>\n                const LoadingCellView(padding: EdgeInsets.zero),\n            newPageProgressIndicatorBuilder: (context) =>\n                const LoadingCellView(padding: EdgeInsets.zero),\n            firstPageErrorIndicatorBuilder: (context) => Center(\n              child: AmmessoErrorView(\n                description:\n                    ",
  ", //TODO: localize\n                retryCallback: () => _refreshData(),\n              ),\n            ),\n            newPageErrorIndicatorBuilder: (context) => null,\n            noItemsFoundIndicatorBuilder: (context) => Center(\n              child: Text(\n                ": ", //TODO: localize\n                retryCallback: () => _refreshData(),\n              ),\n            ),\n            newPageErrorIndicatorBuilder: (context) => null,\n            noItemsFoundIndicatorBuilder: (context) => Center(\n              child: Text(\n                ",
  "Requesting new simulation ranking page: $pageNumber": "Requesting new simulation ranking page: $pageNumber",
  "Graduatoria completa": "Graduatoria completa",
  "Currently fetched items: ${rankingPage.items.length}": "Currently fetched items: ${rankingPage.items.length}",
  "Total items: ${rankingPage.totalItems}": "Total items: ${rankingPage.totalItems}",
  "${rankingEntry.position}° classificato": "${rankingEntry.position}° classificato",
  "Qualcosa è andato storto durante il caricamento della graduatoria completa": "Qualcosa è andato storto durante il caricamento della graduatoria completa",
  "Questa graduatoria è vuota": "Questa graduatoria è vuota",
  "Graduatoria": "Graduatoria",
  "Qualcosa è andato storto durante il caricamento della graduatoria": "Qualcosa è andato storto durante il caricamento della graduatoria",
  "LA TUA POSIZIONE": "LA TUA POSIZIONE",
  "Nessuna simulazione presente.": "Nessuna simulazione presente.",
  "Qualcosa è andato storto durante il caricamento delle simulazioni": "Qualcosa è andato storto durante il caricamento delle simulazioni",
  "SIMULAZIONI TESTBUSTERS": "SIMULAZIONI TESTBUSTERS",
  "SIMULAZIONI MINISTERIALI": "SIMULAZIONI MINISTERIALI",
  "), //TODO: localize\n    EmailValidator(errorText: ": "), //TODO: localize\n    EmailValidator(errorText: ",
  "Inserisci il codice di verifica": "Inserisci il codice di verifica",
  "Il codice di verifica deve contenere almeno 6 caratteri": "Il codice di verifica deve contenere almeno 6 caratteri",
  "Attiva il tuo account": "Attiva il tuo account",
  "Inserisci il codice di verificache hai ricevuto tramite email per attivare il tuo account": "Inserisci il codice di verificache hai ricevuto tramite email per attivare il tuo account",
  "Attiva account": "Attiva account",
  "Reinvia codice di verifica": "Reinvia codice di verifica",
  "Email": "Email",
  "Codice di verifica": "Codice di verifica",
  "Account attivato": "Account attivato",
  "Accedi ad Ammesso.it usando il tuo nuovo account per iniziare ad esercitarti": "Accedi ad Ammesso.it usando il tuo nuovo account per iniziare ad esercitarti",
  "Accedi": "Accedi",
  "Crea nuova password": "Crea nuova password",
  "Salva e accedi": "Salva e accedi",
  "Password reimpostata": "Password reimpostata",
  "Accedi al tuo account usando la tua nuova password per ricominciare ad esercitarti": "Accedi al tuo account usando la tua nuova password per ricominciare ad esercitarti",
  "Qualcosa è andato storto durante il caricamento della Privacy Policy": "Qualcosa è andato storto durante il caricamento della Privacy Policy",
  "Un ultimo sforzo": "Un ultimo sforzo",
  "Teniamo alla tua privacy, seleziona le condizioni a cui vuoi aderire": "Teniamo alla tua privacy, seleziona le condizioni a cui vuoi aderire",
  "informativa di Squezy S.r.l.": "informativa di Squezy S.r.l.",
  "Preferenze salvate con successo": "Preferenze salvate con successo",
  "Acconsento": "Acconsento",
  "Non acconsento": "Non acconsento",
  "dart:collection": "dart:collection",
  "Per il trattamento dei dati personali per le finalità a)": "Per il trattamento dei dati personali per le finalità a)",
  "Acconsento al trattamento dei dati personali per la finalità b), attività di marketing.": "Acconsento al trattamento dei dati personali per la finalità b), attività di marketing.",
  "Acconsento al trattamento dei dati personali per la finalità c), svolgimento di sondaggi e indagini di mercato.": "Acconsento al trattamento dei dati personali per la finalità c), svolgimento di sondaggi e indagini di mercato.",
  "https://staging.ammesso.it/policy/privacy/": "https://staging.ammesso.it/policy/privacy/",
  "https://www.ammesso.it/policy/privacy/": "https://www.ammesso.it/policy/privacy/",
  "Password dimenticata?": "Password dimenticata?",
  "Non preoccuparti, inserisci la tua email per reimpostarla": "Non preoccuparti, inserisci la tua email per reimpostarla",
  "Reimposta": "Reimposta",
  "images/ic_email_sent.png": "images/ic_email_sent.png",
  "Codice inviato": "Codice inviato",
  "Inserisci il codice di verifica che ti abbiamo inviato via email nella prossima schermata per creareuna nuova password": "Inserisci il codice di verifica che ti abbiamo inviato via email nella prossima schermata per creareuna nuova password",
  "), //TODO: localize\n      EmailValidator(\n          errorText: ": "), //TODO: localize\n      EmailValidator(\n          errorText: ",
  "Attiva": "Attiva",
  "Bentornato": "Bentornato",
  "Inserisci le tue credenziali per riprendere ad esercitarti": "Inserisci le tue credenziali per riprendere ad esercitarti",
  "Password": "Password",
  "Inserisci un nome": "Inserisci un nome",
  "Inizia ad esercitarti": "Inizia ad esercitarti",
  "Iscriviti ad Ammesso.it e aumenta le tue possibilità di superare il test": "Iscriviti ad Ammesso.it e aumenta le tue possibilità di superare il test",
  "Crea un account": "Crea un account",
  "images/welcome_page_one.png": "images/welcome_page_one.png",
  "Esercitati": "Esercitati",
  "Preparati al test di ammissione esercitandoti su oltre 3.000 domande spiegate dai nostri docenti": "Preparati al test di ammissione esercitandoti su oltre 3.000 domande spiegate dai nostri docenti",
  "images/welcome_page_two.png": "images/welcome_page_two.png",
  "Migliora": "Migliora",
  "Ottieni rapporti dettagliati sulle tue performance e incrementa il punteggio ad ogni test": "Ottieni rapporti dettagliati sulle tue performance e incrementa il punteggio ad ogni test",
  "images/welcome_page_three.png": "images/welcome_page_three.png",
  "Supera il test": "Supera il test",
  "Esercitati. Scopri le tue lacune.\\nMigliora il tuo punteggio.\\nAccedi al tuo futuro!": "Esercitati. Scopri le tue lacune.\\nMigliora il tuo punteggio.\\nAccedi al tuo futuro!",
  "/welcome-screen": "/welcome-screen",
  "/sign-up-screen": "/sign-up-screen",
  "/confirm-sign-up-screen": "/confirm-sign-up-screen",
  "/sign-in-screen": "/sign-in-screen",
  "/reset-password-screen": "/reset-password-screen",
  "/create-new-password-screen": "/create-new-password-screen",
  "/privacy-policies-screen": "/privacy-policies-screen",
  "/stepped-pager-screen": "/stepped-pager-screen",
  "/dashboard-screen": "/dashboard-screen",
  "/create-quiz-screen": "/create-quiz-screen",
  "/profile-screen": "/profile-screen",
  "/activity-stats-screen": "/activity-stats-screen",
  "/activity-correction-screen": "/activity-correction-screen",
  "/change-password-screen": "/change-password-screen",
  "/badge-list-screen": "/badge-list-screen",
  "/change-user-name-screen": "/change-user-name-screen",
  "/change-user-surname-screen": "/change-user-surname-screen",
  "/section-details-screen": "/section-details-screen",
  "/testbusters-services-screen": "/testbusters-services-screen",
  "/repeatable-simulation-details-screen": "/repeatable-simulation-details-screen",
  "/not-repeatable-simulation-details-screen": "/not-repeatable-simulation-details-screen",
  "/simulation-ranking-screen": "/simulation-ranking-screen",
  "/simulation-ranking-details-screen": "/simulation-ranking-details-screen",
  ", //TODO: localize\n        description:\n            ": ", //TODO: localize\n        description:\n            ",
  "images/launchscreen_logo.png": "images/launchscreen_logo.png",
  "images/ic_dialog_update.png": "images/ic_dialog_update.png",
  "Aggiorna": "Aggiorna",
  "Could not launch $_appURL": "Could not launch $_appURL",
  "Could not launch $_appURL: $exception": "Could not launch $_appURL: $exception",
  "dart:async": "dart:async",
  "Completa profilo": "Completa profilo",
  ";\n          if (!isLoadingData && !loadingDataFailed) {\n            if (_pagerData is OnboardingData ||\n                _pagerData is ChangeQuizSubscriptionData) {\n              buttonTitle = ": ";\n          if (!isLoadingData && !loadingDataFailed) {\n            if (_pagerData is OnboardingData ||\n                _pagerData is ChangeQuizSubscriptionData) {\n              buttonTitle = ",
  "; //TODO: localize\n            } else if (_pagerData is NewQuizData ||\n                _pagerData is UncompletedQuizData ||\n                _pagerData is NewSimulationData ||\n                _pagerData is UncompletedSimulationData) {\n              buttonTitle = ": "; //TODO: localize\n            } else if (_pagerData is NewQuizData ||\n                _pagerData is UncompletedQuizData ||\n                _pagerData is NewSimulationData ||\n                _pagerData is UncompletedSimulationData) {\n              buttonTitle = ",
  "; //TODO: localize\n            }\n          }\n          return Padding(\n            padding: const EdgeInsets.only(right: 8.0),\n            child: TextButton(\n              style: ButtonStyle(\n                overlayColor: MaterialStateProperty.all(Colors.transparent),\n              ),\n              onPressed: buttonEnabled\n                  ? () {\n                      if (_pagerData is OnboardingData) {\n                        _viewModel.saveProfilation();\n                      } else if (_pagerData is ChangeQuizSubscriptionData) {\n                        _viewModel.saveSelectedQuiz();\n                      } else if (_pagerData is NewQuizData ||\n                          _pagerData is UncompletedQuizData ||\n                          _pagerData is NewSimulationData ||\n                          _pagerData is UncompletedSimulationData) {\n                        _showCompleteActivityConfirmationDialog(context);\n                      }\n                    }\n                  : null,\n              child: Text(\n                buttonTitle,\n                style: AmmessoTypography.SubtitleBold.copyWith(\n                    color: buttonEnabled\n                        ? AmmessoColors.Blue\n                        : AmmessoColors.Smoke),\n              ),\n            ),\n          );\n        },\n      ),\n    );\n  }\n\n  String _getTimerTitle(TimerService timerService) {\n    final isRunning = timerService.isRunning;\n    var elapsedTimeSeconds = timerService.currentDuration.inSeconds;\n    var canShowTitle = elapsedTimeSeconds > 0;\n\n    if ((_pagerData is NewSimulationData ||\n        _pagerData is UncompletedSimulationData)) {\n      var simulationDuration;\n      if (_pagerData is NewSimulationData) {\n        simulationDuration = Duration(\n            milliseconds:\n                (_pagerData as NewSimulationData).simulationDurationMillis);\n      } else if (_pagerData is UncompletedSimulationData) {\n        simulationDuration = Duration(\n            milliseconds: (_pagerData as UncompletedSimulationData)\n                .simulationDurationMillis);\n      }\n\n      elapsedTimeSeconds = simulationDuration.inSeconds - elapsedTimeSeconds;\n      canShowTitle = elapsedTimeSeconds < simulationDuration.inSeconds;\n      if (elapsedTimeSeconds <= 0) {\n        return ": "; //TODO: localize\n            }\n          }\n          return Padding(\n            padding: const EdgeInsets.only(right: 8.0),\n            child: TextButton(\n              style: ButtonStyle(\n                overlayColor: MaterialStateProperty.all(Colors.transparent),\n              ),\n              onPressed: buttonEnabled\n                  ? () {\n                      if (_pagerData is OnboardingData) {\n                        _viewModel.saveProfilation();\n                      } else if (_pagerData is ChangeQuizSubscriptionData) {\n                        _viewModel.saveSelectedQuiz();\n                      } else if (_pagerData is NewQuizData ||\n                          _pagerData is UncompletedQuizData ||\n                          _pagerData is NewSimulationData ||\n                          _pagerData is UncompletedSimulationData) {\n                        _showCompleteActivityConfirmationDialog(context);\n                      }\n                    }\n                  : null,\n              child: Text(\n                buttonTitle,\n                style: AmmessoTypography.SubtitleBold.copyWith(\n                    color: buttonEnabled\n                        ? AmmessoColors.Blue\n                        : AmmessoColors.Smoke),\n              ),\n            ),\n          );\n        },\n      ),\n    );\n  }\n\n  String _getTimerTitle(TimerService timerService) {\n    final isRunning = timerService.isRunning;\n    var elapsedTimeSeconds = timerService.currentDuration.inSeconds;\n    var canShowTitle = elapsedTimeSeconds > 0;\n\n    if ((_pagerData is NewSimulationData ||\n        _pagerData is UncompletedSimulationData)) {\n      var simulationDuration;\n      if (_pagerData is NewSimulationData) {\n        simulationDuration = Duration(\n            milliseconds:\n                (_pagerData as NewSimulationData).simulationDurationMillis);\n      } else if (_pagerData is UncompletedSimulationData) {\n        simulationDuration = Duration(\n            milliseconds: (_pagerData as UncompletedSimulationData)\n                .simulationDurationMillis);\n      }\n\n      elapsedTimeSeconds = simulationDuration.inSeconds - elapsedTimeSeconds;\n      canShowTitle = elapsedTimeSeconds < simulationDuration.inSeconds;\n      if (elapsedTimeSeconds <= 0) {\n        return ",
  ";\n      }\n    }\n\n    if (canShowTitle || isRunning) {\n      final elapsedSeconds = elapsedTimeSeconds % 60;\n      final elapsedMinutes = (elapsedTimeSeconds ~/ 60) % 60;\n      final elapsedHours = (elapsedTimeSeconds ~/ 60) ~/ 60;\n\n      var elapsedSecondsString = elapsedSeconds.toString();\n      if (elapsedSeconds < 10) {\n        elapsedSecondsString = ": ";\n      }\n    }\n\n    if (canShowTitle || isRunning) {\n      final elapsedSeconds = elapsedTimeSeconds % 60;\n      final elapsedMinutes = (elapsedTimeSeconds ~/ 60) % 60;\n      final elapsedHours = (elapsedTimeSeconds ~/ 60) ~/ 60;\n\n      var elapsedSecondsString = elapsedSeconds.toString();\n      if (elapsedSeconds < 10) {\n        elapsedSecondsString = ",
  ";\n      }\n\n      var elapsedMinutesString = elapsedMinutes.toString();\n      if (elapsedMinutes < 10) {\n        elapsedMinutesString = ": ";\n      }\n\n      var elapsedMinutesString = elapsedMinutes.toString();\n      if (elapsedMinutes < 10) {\n        elapsedMinutesString = ",
  ";\n      }\n      var elapsedHoursString = ": ";\n      }\n      var elapsedHoursString = ",
  ";\n      if (elapsedHours > 0) {\n        if (elapsedHours < 10) {\n          elapsedHoursString = ": ";\n      if (elapsedHours > 0) {\n        if (elapsedHours < 10) {\n          elapsedHoursString = ",
  ";\n        } else {\n          elapsedHoursString = ": ";\n        } else {\n          elapsedHoursString = ",
  ";\n        }\n      }\n      return ": ";\n        }\n      }\n      return ",
  ";\n    }\n    return ": ";\n    }\n    return ",
  ";\n  }\n\n  Widget _getPageView() {\n    final pageItems = <QuestionPageItem>[];\n    final questions = _viewModel.questions;\n    final questionPageItems = questions.map((question) {\n      ActivityHeaderFormat headerFormat;\n      if (question.format == SteppedPagerQuestionFormat.html) {\n        headerFormat = ActivityHeaderFormat.html;\n      } else if (question.format == SteppedPagerQuestionFormat.katex) {\n        headerFormat = ActivityHeaderFormat.katex;\n      }\n      final headerItem =\n          ActivityHeaderListItem(title: question.body, format: headerFormat);\n      return QuestionPageItem(headerItem: headerItem);\n    }).toList();\n    pageItems.addAll(questionPageItems);\n\n    return PageView.builder(\n      physics: const NeverScrollableScrollPhysics(),\n      controller: _pageController,\n      itemCount: pageItems.length,\n      itemBuilder: (context, pageIndex) {\n        final questionPageItem = pageItems[pageIndex];\n        BorderedTextCellViewFormat format;\n        final currentQuestion = _viewModel.questions[pageIndex];\n        if (currentQuestion.format == SteppedPagerQuestionFormat.html) {\n          format = BorderedTextCellViewFormat.html;\n        } else if (currentQuestion.format == SteppedPagerQuestionFormat.katex) {\n          format = BorderedTextCellViewFormat.katex;\n        }\n        return Consumer(\n          builder: (context, watch, child) {\n            final selectedOptions =\n                watch(_viewModel.questionsAnswersProvider).value;\n            final isSavingData = watch(_viewModel.isSavingDataProvider).value;\n            questionPageItem.listItems = currentQuestion.choices\n                .asMap()\n                .map((index, questionChoice) {\n                  final selected =\n                      selectedOptions[currentQuestion.id] == questionChoice.id;\n                  return MapEntry(\n                      index,\n                      BorderedTextListItem(\n                        padding: const EdgeInsets.symmetric(horizontal: 16.0),\n                        first: index == 0,\n                        last: index == currentQuestion.choices.length - 1,\n                        title: questionChoice.body,\n                        format: format,\n                        selected: selected,\n                        enabled: selected || !isSavingData,\n                        selectionCallback: () {\n                          _viewModel.setQuestionAnswer(\n                              currentQuestion.id, questionChoice.id);\n                        },\n                      ));\n                })\n                .values\n                .toList(growable: false);\n            return questionPageItem.getPageView(context);\n          },\n        );\n      },\n    );\n  }\n\n  Widget _getBottomBar() {\n    return Consumer(\n      builder: (context, watch, child) {\n        final isSavingData = watch(_viewModel.isSavingDataProvider).value;\n        final currentPageIndex =\n            watch(_viewModel.currentPageIndexProvider).value;\n        final selectedOptions =\n            watch(_viewModel.questionsAnswersProvider).value;\n        final canSkipPages = _viewModel.getCanSkipPages;\n        final totalPages = _viewModel.getTotalPages;\n        final currentQuestion = _viewModel.questions[currentPageIndex];\n        final optionSelected = selectedOptions[currentQuestion.id] != null;\n        final backButtonEnabled = !isSavingData && currentPageIndex > 0;\n        final nextButtonEnabled = !isSavingData &&\n            currentPageIndex + 1 < totalPages &&\n            (canSkipPages || optionSelected);\n\n        return SteppedPagerBottomBar(\n            currentPage: currentPageIndex + 1,\n            totalPages: totalPages,\n            isLoading: isSavingData,\n            backButtonEnabled: backButtonEnabled,\n            nextButtonEnabled: nextButtonEnabled,\n            backButtonPressed: () => _viewModel.changePage(forward: false),\n            nextButtonPressed: () => _viewModel.changePage(forward: true));\n      },\n    );\n  }\n\n  void _showCloseConfirmationDialog(BuildContext context) {\n    if (_isShowingCloseConfirmationDialog) {\n      return;\n    }\n    _isShowingCloseConfirmationDialog = true;\n    final isSimulation = _pagerData is NewSimulationData ||\n        _pagerData is UncompletedSimulationData;\n\n    if (!isSimulation) {\n      _viewModel.updateQuestionTime();\n      _viewModel.stopTimer();\n    }\n\n    final description = isSimulation\n        ? ": ";\n  }\n\n  Widget _getPageView() {\n    final pageItems = <QuestionPageItem>[];\n    final questions = _viewModel.questions;\n    final questionPageItems = questions.map((question) {\n      ActivityHeaderFormat headerFormat;\n      if (question.format == SteppedPagerQuestionFormat.html) {\n        headerFormat = ActivityHeaderFormat.html;\n      } else if (question.format == SteppedPagerQuestionFormat.katex) {\n        headerFormat = ActivityHeaderFormat.katex;\n      }\n      final headerItem =\n          ActivityHeaderListItem(title: question.body, format: headerFormat);\n      return QuestionPageItem(headerItem: headerItem);\n    }).toList();\n    pageItems.addAll(questionPageItems);\n\n    return PageView.builder(\n      physics: const NeverScrollableScrollPhysics(),\n      controller: _pageController,\n      itemCount: pageItems.length,\n      itemBuilder: (context, pageIndex) {\n        final questionPageItem = pageItems[pageIndex];\n        BorderedTextCellViewFormat format;\n        final currentQuestion = _viewModel.questions[pageIndex];\n        if (currentQuestion.format == SteppedPagerQuestionFormat.html) {\n          format = BorderedTextCellViewFormat.html;\n        } else if (currentQuestion.format == SteppedPagerQuestionFormat.katex) {\n          format = BorderedTextCellViewFormat.katex;\n        }\n        return Consumer(\n          builder: (context, watch, child) {\n            final selectedOptions =\n                watch(_viewModel.questionsAnswersProvider).value;\n            final isSavingData = watch(_viewModel.isSavingDataProvider).value;\n            questionPageItem.listItems = currentQuestion.choices\n                .asMap()\n                .map((index, questionChoice) {\n                  final selected =\n                      selectedOptions[currentQuestion.id] == questionChoice.id;\n                  return MapEntry(\n                      index,\n                      BorderedTextListItem(\n                        padding: const EdgeInsets.symmetric(horizontal: 16.0),\n                        first: index == 0,\n                        last: index == currentQuestion.choices.length - 1,\n                        title: questionChoice.body,\n                        format: format,\n                        selected: selected,\n                        enabled: selected || !isSavingData,\n                        selectionCallback: () {\n                          _viewModel.setQuestionAnswer(\n                              currentQuestion.id, questionChoice.id);\n                        },\n                      ));\n                })\n                .values\n                .toList(growable: false);\n            return questionPageItem.getPageView(context);\n          },\n        );\n      },\n    );\n  }\n\n  Widget _getBottomBar() {\n    return Consumer(\n      builder: (context, watch, child) {\n        final isSavingData = watch(_viewModel.isSavingDataProvider).value;\n        final currentPageIndex =\n            watch(_viewModel.currentPageIndexProvider).value;\n        final selectedOptions =\n            watch(_viewModel.questionsAnswersProvider).value;\n        final canSkipPages = _viewModel.getCanSkipPages;\n        final totalPages = _viewModel.getTotalPages;\n        final currentQuestion = _viewModel.questions[currentPageIndex];\n        final optionSelected = selectedOptions[currentQuestion.id] != null;\n        final backButtonEnabled = !isSavingData && currentPageIndex > 0;\n        final nextButtonEnabled = !isSavingData &&\n            currentPageIndex + 1 < totalPages &&\n            (canSkipPages || optionSelected);\n\n        return SteppedPagerBottomBar(\n            currentPage: currentPageIndex + 1,\n            totalPages: totalPages,\n            isLoading: isSavingData,\n            backButtonEnabled: backButtonEnabled,\n            nextButtonEnabled: nextButtonEnabled,\n            backButtonPressed: () => _viewModel.changePage(forward: false),\n            nextButtonPressed: () => _viewModel.changePage(forward: true));\n      },\n    );\n  }\n\n  void _showCloseConfirmationDialog(BuildContext context) {\n    if (_isShowingCloseConfirmationDialog) {\n      return;\n    }\n    _isShowingCloseConfirmationDialog = true;\n    final isSimulation = _pagerData is NewSimulationData ||\n        _pagerData is UncompletedSimulationData;\n\n    if (!isSimulation) {\n      _viewModel.updateQuestionTime();\n      _viewModel.stopTimer();\n    }\n\n    final description = isSimulation\n        ? ",
  " //TODO: localize\n        : ": " //TODO: localize\n        : ",
  "; //TODO: localize\n\n    showAmmessoDialog(\n      context,\n      dismissedCallback: () => _isShowingCloseConfirmationDialog = false,\n      image: ": "; //TODO: localize\n\n    showAmmessoDialog(\n      context,\n      dismissedCallback: () => _isShowingCloseConfirmationDialog = false,\n      image: ",
  ",\n      title: ": ",\n      title: ",
  ", //TODO: localize\n      description: description,\n      positiveButtonTitle: ": ", //TODO: localize\n      description: description,\n      positiveButtonTitle: ",
  ", //TODO: localize\n      positiveButtonCallback: () {\n        if (isSimulation) {\n          _viewModel.updateQuestionTime();\n          _viewModel.stopTimer();\n        }\n        _viewModel.closePager();\n      },\n      negativeButtonTitle: ": ", //TODO: localize\n      positiveButtonCallback: () {\n        if (isSimulation) {\n          _viewModel.updateQuestionTime();\n          _viewModel.stopTimer();\n        }\n        _viewModel.closePager();\n      },\n      negativeButtonTitle: ",
  ", //TODO: localize\n      negativeButtonCallback: () {\n        if (!isSimulation) {\n          _viewModel.startTimer();\n        }\n      },\n    );\n  }\n\n  void _showCompleteActivityConfirmationDialog(BuildContext context) {\n    if (_isShowingCompleteActivityConfirmationDialog) {\n      return;\n    }\n\n    _isShowingCompleteActivityConfirmationDialog = true;\n    final isSimulation = _pagerData is NewSimulationData ||\n        _pagerData is UncompletedSimulationData;\n    var isRepeatableSimulation = _pagerData is NewSimulationData &&\n        (_pagerData as NewSimulationData).isRepeatable;\n\n    if (!isSimulation) {\n      _viewModel.updateQuestionTime();\n      _viewModel.stopTimer();\n    }\n\n    final title = isSimulation\n        ? ": ", //TODO: localize\n      negativeButtonCallback: () {\n        if (!isSimulation) {\n          _viewModel.startTimer();\n        }\n      },\n    );\n  }\n\n  void _showCompleteActivityConfirmationDialog(BuildContext context) {\n    if (_isShowingCompleteActivityConfirmationDialog) {\n      return;\n    }\n\n    _isShowingCompleteActivityConfirmationDialog = true;\n    final isSimulation = _pagerData is NewSimulationData ||\n        _pagerData is UncompletedSimulationData;\n    var isRepeatableSimulation = _pagerData is NewSimulationData &&\n        (_pagerData as NewSimulationData).isRepeatable;\n\n    if (!isSimulation) {\n      _viewModel.updateQuestionTime();\n      _viewModel.stopTimer();\n    }\n\n    final title = isSimulation\n        ? ",
  "; //TODO: localize\n    final description = !isRepeatableSimulation\n        ? ": "; //TODO: localize\n    final description = !isRepeatableSimulation\n        ? ",
  "; //TODO: localize\n\n    showAmmessoDialog(\n      context,\n      dismissedCallback: () =>\n          _isShowingCompleteActivityConfirmationDialog = false,\n      image: ": "; //TODO: localize\n\n    showAmmessoDialog(\n      context,\n      dismissedCallback: () =>\n          _isShowingCompleteActivityConfirmationDialog = false,\n      image: ",
  ",\n      title: title,\n      description: description,\n      positiveButtonTitle: ": ",\n      title: title,\n      description: description,\n      positiveButtonTitle: ",
  ", //TODO: localize\n      positiveButtonCallback: () {\n        if (isSimulation) {\n          _viewModel.updateQuestionTime();\n          _viewModel.stopTimer();\n        }\n        _viewModel.completeActivity();\n      },\n      negativeButtonTitle: ": ", //TODO: localize\n      positiveButtonCallback: () {\n        if (isSimulation) {\n          _viewModel.updateQuestionTime();\n          _viewModel.stopTimer();\n        }\n        _viewModel.completeActivity();\n      },\n      negativeButtonTitle: ",
  ", //TODO: localize\n      negativeButtonCallback: () {\n        if (!isSimulation) {\n          _viewModel.startTimer();\n        }\n      },\n    );\n  }\n\n  void _showActivityLoadedDialog(BuildContext context) {\n    if (_isShowingActivityLoadedDialog) {\n      return;\n    }\n\n    _isShowingActivityLoadedDialog = true;\n\n    final isSimulation = _pagerData is NewSimulationData ||\n        _pagerData is UncompletedSimulationData;\n\n    final title = isSimulation\n        ? ": ", //TODO: localize\n      negativeButtonCallback: () {\n        if (!isSimulation) {\n          _viewModel.startTimer();\n        }\n      },\n    );\n  }\n\n  void _showActivityLoadedDialog(BuildContext context) {\n    if (_isShowingActivityLoadedDialog) {\n      return;\n    }\n\n    _isShowingActivityLoadedDialog = true;\n\n    final isSimulation = _pagerData is NewSimulationData ||\n        _pagerData is UncompletedSimulationData;\n\n    final title = isSimulation\n        ? ",
  "; //TODO: localize\n    final description = isSimulation\n        ? ": "; //TODO: localize\n    final description = isSimulation\n        ? ",
  "; //TODO: localize\n    final buttonTitle = isSimulation\n        ? ": "; //TODO: localize\n    final buttonTitle = isSimulation\n        ? ",
  "; //TODO: localize\n\n    showAmmessoDialog(\n      context,\n      dismissedCallback: () => _isShowingActivityLoadedDialog = false,\n      image: ": "; //TODO: localize\n\n    showAmmessoDialog(\n      context,\n      dismissedCallback: () => _isShowingActivityLoadedDialog = false,\n      image: ",
  ",\n      title: title,\n      description: description,\n      positiveButtonTitle: buttonTitle,\n      positiveButtonCallback: () {\n        _viewModel.startTimer();\n        _viewModel.updateQuestionStartTime();\n      },\n    );\n  }\n\n  void _showQuizSavedConfirmationDialog(BuildContext context) {\n    if (_isShowingQuizSavedConfirmationDialog) {\n      return;\n    }\n\n    _isShowingQuizSavedConfirmationDialog = true;\n\n    showAmmessoDialog(\n      context,\n      dismissedCallback: () => _isShowingQuizSavedConfirmationDialog = false,\n      image: ": ",\n      title: title,\n      description: description,\n      positiveButtonTitle: buttonTitle,\n      positiveButtonCallback: () {\n        _viewModel.startTimer();\n        _viewModel.updateQuestionStartTime();\n      },\n    );\n  }\n\n  void _showQuizSavedConfirmationDialog(BuildContext context) {\n    if (_isShowingQuizSavedConfirmationDialog) {\n      return;\n    }\n\n    _isShowingQuizSavedConfirmationDialog = true;\n\n    showAmmessoDialog(\n      context,\n      dismissedCallback: () => _isShowingQuizSavedConfirmationDialog = false,\n      image: ",
  ", //TODO: localize\n      description: ": ", //TODO: localize\n      description: ",
  ", //TODO: localize\n      positiveButtonTitle: ": ", //TODO: localize\n      positiveButtonTitle: ",
  ", //TODO: localize\n      positiveButtonCallback: () => Navigator.pop(context),\n    );\n  }\n\n  void _showSimulationTimeExpiredDialog(BuildContext context) {\n    if (_isShowingSimulationTimeExpiredDialog) {\n      return;\n    }\n\n    _isShowingSimulationTimeExpiredDialog = true;\n\n    _viewModel.updateQuestionTime();\n    _viewModel.stopTimer();\n\n    showAmmessoDialog(context,\n        dismissedCallback: () => _isShowingSimulationTimeExpiredDialog = false,\n        image: ": ", //TODO: localize\n      positiveButtonCallback: () => Navigator.pop(context),\n    );\n  }\n\n  void _showSimulationTimeExpiredDialog(BuildContext context) {\n    if (_isShowingSimulationTimeExpiredDialog) {\n      return;\n    }\n\n    _isShowingSimulationTimeExpiredDialog = true;\n\n    _viewModel.updateQuestionTime();\n    _viewModel.stopTimer();\n\n    showAmmessoDialog(context,\n        dismissedCallback: () => _isShowingSimulationTimeExpiredDialog = false,\n        image: ",
  ",\n        title: ": ",\n        title: ",
  ", //TODO: localize\n        positiveButtonTitle: ": ", //TODO: localize\n        positiveButtonTitle: ",
  ", //TODO: localize\n        positiveButtonCallback: () {\n          _viewModel.completeActivity();\n        });\n  }\n\n  void _showLoadingErrorDialog(BuildContext context, String errorMessage) {\n    if (_isShowingLoadingErrorDialog) {\n      return;\n    }\n\n    _isShowingLoadingErrorDialog = true;\n\n    var showExitButton = true;\n    if (_pagerData is OnboardingData ||\n        (_pagerData is ChangeQuizSubscriptionData &&\n            (_pagerData as ChangeQuizSubscriptionData).fromOnboarding)) {\n      showExitButton = false;\n    }\n\n    showAmmessoDialog(\n      context,\n      dismissedCallback: () => _isShowingLoadingErrorDialog = false,\n      image: ": ", //TODO: localize\n        positiveButtonCallback: () {\n          _viewModel.completeActivity();\n        });\n  }\n\n  void _showLoadingErrorDialog(BuildContext context, String errorMessage) {\n    if (_isShowingLoadingErrorDialog) {\n      return;\n    }\n\n    _isShowingLoadingErrorDialog = true;\n\n    var showExitButton = true;\n    if (_pagerData is OnboardingData ||\n        (_pagerData is ChangeQuizSubscriptionData &&\n            (_pagerData as ChangeQuizSubscriptionData).fromOnboarding)) {\n      showExitButton = false;\n    }\n\n    showAmmessoDialog(\n      context,\n      dismissedCallback: () => _isShowingLoadingErrorDialog = false,\n      image: ",
  ", //TODO: localize\n      description: errorMessage,\n      positiveButtonTitle: ": ", //TODO: localize\n      description: errorMessage,\n      positiveButtonTitle: ",
  ", //TODO: localize\n      positiveButtonCallback: () => _viewModel.loadData(),\n      negativeButtonTitle: showExitButton ? ": ", //TODO: localize\n      positiveButtonCallback: () => _viewModel.loadData(),\n      negativeButtonTitle: showExitButton ? ",
  " : null, //TODO: localize\n      negativeButtonCallback:\n          showExitButton ? () => _viewModel.closeWithoutSaving() : null,\n    );\n  }\n\n  void _showErrorDialog(BuildContext context, SteppedPagerError error) {\n    if (_isShowingErrorDialog) {\n      return;\n    }\n\n    _isShowingErrorDialog = true;\n\n    var showExitButton = true;\n    if (_pagerData is OnboardingData ||\n        (_pagerData is ChangeQuizSubscriptionData &&\n            (_pagerData as ChangeQuizSubscriptionData).fromOnboarding)) {\n      showExitButton = false;\n    }\n    VoidCallback retryCallback;\n    switch (error.type) {\n      case SteppedPagerErrorType.saveProfilation:\n        retryCallback = () => _viewModel.saveProfilation();\n        break;\n      case SteppedPagerErrorType.saveSelectedQuiz:\n        retryCallback = () => _viewModel.saveSelectedQuiz();\n        break;\n      case SteppedPagerErrorType.closePager:\n        retryCallback = () => _viewModel.closePager();\n        break;\n      case SteppedPagerErrorType.goToPreviousPage:\n        retryCallback = () => _viewModel.changePage(forward: false);\n        break;\n      case SteppedPagerErrorType.goToNextPage:\n        retryCallback = () => _viewModel.changePage(forward: true);\n        break;\n      case SteppedPagerErrorType.completeActivity:\n        retryCallback = () => _viewModel.completeActivity();\n        break;\n    }\n\n    showAmmessoDialog(\n      context,\n      dismissedCallback: () => _isShowingErrorDialog = false,\n      image: ": " : null, //TODO: localize\n      negativeButtonCallback:\n          showExitButton ? () => _viewModel.closeWithoutSaving() : null,\n    );\n  }\n\n  void _showErrorDialog(BuildContext context, SteppedPagerError error) {\n    if (_isShowingErrorDialog) {\n      return;\n    }\n\n    _isShowingErrorDialog = true;\n\n    var showExitButton = true;\n    if (_pagerData is OnboardingData ||\n        (_pagerData is ChangeQuizSubscriptionData &&\n            (_pagerData as ChangeQuizSubscriptionData).fromOnboarding)) {\n      showExitButton = false;\n    }\n    VoidCallback retryCallback;\n    switch (error.type) {\n      case SteppedPagerErrorType.saveProfilation:\n        retryCallback = () => _viewModel.saveProfilation();\n        break;\n      case SteppedPagerErrorType.saveSelectedQuiz:\n        retryCallback = () => _viewModel.saveSelectedQuiz();\n        break;\n      case SteppedPagerErrorType.closePager:\n        retryCallback = () => _viewModel.closePager();\n        break;\n      case SteppedPagerErrorType.goToPreviousPage:\n        retryCallback = () => _viewModel.changePage(forward: false);\n        break;\n      case SteppedPagerErrorType.goToNextPage:\n        retryCallback = () => _viewModel.changePage(forward: true);\n        break;\n      case SteppedPagerErrorType.completeActivity:\n        retryCallback = () => _viewModel.completeActivity();\n        break;\n    }\n\n    showAmmessoDialog(\n      context,\n      dismissedCallback: () => _isShowingErrorDialog = false,\n      image: ",
  ", //TODO: localize\n      description: error.message,\n      positiveButtonTitle: ": ", //TODO: localize\n      description: error.message,\n      positiveButtonTitle: ",
  ", //TODO: localize\n      positiveButtonCallback: retryCallback,\n      negativeButtonTitle: showExitButton ? ": ", //TODO: localize\n      positiveButtonCallback: retryCallback,\n      negativeButtonTitle: showExitButton ? ",
  "Quale test di ammissione vuoi preparare?": "Quale test di ammissione vuoi preparare?",
  "sample": "sample",
  "quiz_subscription": "quiz_subscription",
  "Analytics: Configured": "Analytics: Configured",
  "Analytics: User ${user.id} set": "Analytics: User ${user.id} set",
  "Analytics: reset": "Analytics: reset",
  "Analytics: Event ${event.name} logged": "Analytics: Event ${event.name} logged",
  "create_quiz_opened": "create_quiz_opened",
  "activity_started": "activity_started",
  "activity_resumed": "activity_resumed",
  "activity_closed": "activity_closed",
  "activity_completed": "activity_completed",
  "public_simulation_started": "public_simulation_started",
  "public_simulation_closed": "public_simulation_closed",
  "ministerial_simulation_started": "ministerial_simulation_started",
  "ministerial_simulation_resumed": "ministerial_simulation_resumed",
  "ministerial_simulation_closed": "ministerial_simulation_closed",
  "ministerial_simulation_completed": "ministerial_simulation_completed",
  "created": "created",
  "first_name": "first_name",
  "last_name": "last_name",
  "Counter increments smoke test": "Counter increments smoke test",
  "+": "+"
}